# Generated by Django 5.2.6 on 2025-09-24 08:38

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='PropertyType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True)),
            ],
        ),
        migrations.CreateModel(
            name='Amenity',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('has_balcony', models.BooleanField(default=False)),
                ('has_garden', models.BooleanField(default=False)),
                ('has_swimming_pool', models.BooleanField(default=False)),
                ('has_gym', models.BooleanField(default=False)),
                ('has_elevator', models.BooleanField(default=False)),
                ('has_security', models.BooleanField(default=False)),
                ('has_power_backup', models.BooleanField(default=False)),
                ('has_air_conditioning', models.BooleanField(default=False)),
                ('pet_friendly', models.BooleanField(default=False)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created_by', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated_by', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True)),
                ('location', models.CharField(max_length=255)),
                ('start_date', models.DateField(blank=True, null=True)),
                ('end_date', models.DateField(blank=True, null=True)),
                ('status', models.CharField(default='planning', max_length=50)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created_by', to=settings.AUTH_USER_MODEL)),
                ('developer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='projects', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated_by', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ProjectDocument',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file', models.FileField(upload_to='project_documents/')),
                ('name', models.CharField(max_length=255)),
                ('uploaded_at', models.DateTimeField(auto_now_add=True)),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='documents', to='property.project')),
            ],
        ),
        migrations.CreateModel(
            name='ProjectPhase',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True)),
                ('start_date', models.DateField(blank=True, null=True)),
                ('end_date', models.DateField(blank=True, null=True)),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='phases', to='property.project')),
            ],
        ),
        migrations.CreateModel(
            name='Property',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('title', models.CharField(max_length=255)),
                ('description', models.TextField()),
                ('listing_type', models.CharField(choices=[('sale', 'For Sale'), ('rent', 'For Rent'), ('lease', 'For Lease')], max_length=10)),
                ('status', models.CharField(choices=[('available', 'Available'), ('sold', 'Sold'), ('rented', 'Rented'), ('under_contract', 'Under Contract'), ('off_market', 'Off Market'), ('pending', 'Pending')], default='available', max_length=20)),
                ('address', models.TextField()),
                ('city', models.CharField(max_length=100)),
                ('state', models.CharField(max_length=100)),
                ('country', models.CharField(default='India', max_length=100)),
                ('postal_code', models.CharField(max_length=20)),
                ('latitude', models.DecimalField(blank=True, decimal_places=8, max_digits=10, null=True)),
                ('longitude', models.DecimalField(blank=True, decimal_places=8, max_digits=11, null=True)),
                ('bedrooms', models.PositiveIntegerField(default=0)),
                ('bathrooms', models.PositiveIntegerField(default=0)),
                ('total_area', models.DecimalField(decimal_places=2, help_text='Total area in square feet', max_digits=10)),
                ('carpet_area', models.DecimalField(blank=True, decimal_places=2, help_text='Carpet area in square feet', max_digits=10, null=True)),
                ('built_year', models.PositiveIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1800), django.core.validators.MaxValueValidator(2030)])),
                ('floor_number', models.PositiveIntegerField(blank=True, null=True)),
                ('total_floors', models.PositiveIntegerField(blank=True, null=True)),
                ('price', models.DecimalField(decimal_places=2, max_digits=15)),
                ('price_per_sqft', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('maintenance_charges', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('security_deposit', models.DecimalField(blank=True, decimal_places=2, max_digits=12, null=True)),
                ('furnishing', models.CharField(choices=[('furnished', 'Furnished'), ('semi_furnished', 'Semi Furnished'), ('unfurnished', 'Unfurnished')], default='unfurnished', max_length=20)),
                ('parking', models.CharField(choices=[('none', 'No Parking'), ('street', 'Street Parking'), ('garage', 'Garage'), ('covered', 'Covered Parking'), ('open', 'Open Parking')], default='none', max_length=20)),
                ('parking_spaces', models.PositiveIntegerField(default=0)),
                ('available_from', models.DateField(blank=True, null=True)),
                ('slug', models.SlugField(blank=True, max_length=300, null=True, unique=True)),
                ('is_featured', models.BooleanField(default=False)),
                ('is_verified', models.BooleanField(default=False)),
                ('views_count', models.PositiveIntegerField(default=0)),
                ('agent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='managed_properties', to=settings.AUTH_USER_MODEL)),
                ('amenities', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='properties', to='property.amenity')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created_by', to=settings.AUTH_USER_MODEL)),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='owned_properties', to=settings.AUTH_USER_MODEL)),
                ('project', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='properties', to='property.project')),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated_by', to=settings.AUTH_USER_MODEL)),
                ('property_type', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='properties', to='property.propertytype')),
            ],
            options={
                'verbose_name': 'Property',
                'verbose_name_plural': 'Properties',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='NeighborhoodInfo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('nearest_metro_station', models.CharField(blank=True, max_length=200)),
                ('metro_distance', models.DecimalField(blank=True, decimal_places=2, help_text='Distance in kilometers', max_digits=5, null=True)),
                ('nearest_bus_stop', models.CharField(blank=True, max_length=200)),
                ('bus_stop_distance', models.DecimalField(blank=True, decimal_places=2, help_text='Distance in kilometers', max_digits=5, null=True)),
                ('nearest_school', models.CharField(blank=True, max_length=200)),
                ('school_distance', models.DecimalField(blank=True, decimal_places=2, help_text='Distance in kilometers', max_digits=5, null=True)),
                ('nearest_college', models.CharField(blank=True, max_length=200)),
                ('college_distance', models.DecimalField(blank=True, decimal_places=2, help_text='Distance in kilometers', max_digits=5, null=True)),
                ('nearest_hospital', models.CharField(blank=True, max_length=200)),
                ('hospital_distance', models.DecimalField(blank=True, decimal_places=2, help_text='Distance in kilometers', max_digits=5, null=True)),
                ('nearest_mall', models.CharField(blank=True, max_length=200)),
                ('mall_distance', models.DecimalField(blank=True, decimal_places=2, help_text='Distance in kilometers', max_digits=5, null=True)),
                ('nearest_market', models.CharField(blank=True, max_length=200)),
                ('market_distance', models.DecimalField(blank=True, decimal_places=2, help_text='Distance in kilometers', max_digits=5, null=True)),
                ('restaurants_nearby', models.PositiveIntegerField(default=0)),
                ('atms_nearby', models.PositiveIntegerField(default=0)),
                ('parks_nearby', models.PositiveIntegerField(default=0)),
                ('connectivity_rating', models.PositiveIntegerField(choices=[(1, 1), (2, 2), (3, 3), (4, 4), (5, 5)], default=0, help_text='Rate connectivity from 1-5')),
                ('safety_rating', models.PositiveIntegerField(choices=[(1, 1), (2, 2), (3, 3), (4, 4), (5, 5)], default=0, help_text='Rate safety from 1-5')),
                ('lifestyle_rating', models.PositiveIntegerField(choices=[(1, 1), (2, 2), (3, 3), (4, 4), (5, 5)], default=0, help_text='Rate lifestyle from 1-5')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created_by', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated_by', to=settings.AUTH_USER_MODEL)),
                ('property', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='neighborhood', to='property.property')),
            ],
            options={
                'verbose_name': 'Neighborhood Information',
                'verbose_name_plural': 'Neighborhood Information',
            },
        ),
        migrations.CreateModel(
            name='PropertyAlert',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=100)),
                ('cities', models.JSONField(default=list, help_text='List of cities to search in')),
                ('property_types', models.JSONField(default=list, help_text='List of property types')),
                ('listing_types', models.JSONField(default=list, help_text='List of listing types (sale, rent, lease)')),
                ('min_price', models.DecimalField(blank=True, decimal_places=2, max_digits=15, null=True)),
                ('max_price', models.DecimalField(blank=True, decimal_places=2, max_digits=15, null=True)),
                ('min_bedrooms', models.PositiveIntegerField(blank=True, null=True)),
                ('min_bathrooms', models.PositiveIntegerField(blank=True, null=True)),
                ('min_area', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('max_area', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('required_features', models.JSONField(default=list, help_text='List of required feature IDs')),
                ('is_active', models.BooleanField(default=True)),
                ('frequency', models.CharField(choices=[('instant', 'Instant'), ('daily', 'Daily'), ('weekly', 'Weekly'), ('monthly', 'Monthly')], default='daily', max_length=10)),
                ('last_sent', models.DateTimeField(blank=True, null=True)),
                ('email_alerts', models.BooleanField(default=True)),
                ('sms_alerts', models.BooleanField(default=False)),
                ('push_notifications', models.BooleanField(default=False)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created_by', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated_by', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='property_alerts', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Property Alert',
                'verbose_name_plural': 'Property Alerts',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='PropertyComparison',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=100)),
                ('notes', models.TextField(blank=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created_by', to=settings.AUTH_USER_MODEL)),
                ('properties', models.ManyToManyField(related_name='comparisons', to='property.property')),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated_by', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='property_comparisons', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Property Comparison',
                'verbose_name_plural': 'Property Comparisons',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='PropertyFeature',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=100, unique=True)),
                ('category', models.CharField(choices=[('amenities', 'Amenities'), ('safety', 'Safety & Security'), ('connectivity', 'Connectivity'), ('recreation', 'Recreation'), ('utilities', 'Utilities'), ('convenience', 'Convenience'), ('environment', 'Environment'), ('other', 'Other')], max_length=20)),
                ('description', models.TextField(blank=True)),
                ('icon', models.CharField(blank=True, help_text='Icon class or name', max_length=50)),
                ('is_active', models.BooleanField(default=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created_by', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated_by', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Property Feature',
                'verbose_name_plural': 'Property Features',
                'ordering': ['category', 'name'],
            },
        ),
        migrations.CreateModel(
            name='PropertyInquiry',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=100)),
                ('email', models.EmailField(max_length=254)),
                ('phone', models.CharField(max_length=17, validators=[django.core.validators.RegexValidator(message="Phone number must be in format: '+999999999'. Up to 15 digits allowed.", regex='^\\+?1?\\d{9,15}$')])),
                ('inquiry_type', models.CharField(choices=[('general', 'General Inquiry'), ('viewing', 'Schedule Viewing'), ('purchase', 'Purchase Intent'), ('rental', 'Rental Inquiry'), ('more_info', 'More Information'), ('price_negotiation', 'Price Negotiation'), ('callback', 'Request Callback')], max_length=20)),
                ('message', models.TextField()),
                ('budget', models.DecimalField(blank=True, decimal_places=2, help_text="Inquirer's budget if applicable", max_digits=15, null=True)),
                ('preferred_viewing_date', models.DateTimeField(blank=True, null=True)),
                ('status', models.CharField(choices=[('new', 'New'), ('contacted', 'Contacted'), ('in_progress', 'In Progress'), ('viewing_scheduled', 'Viewing Scheduled'), ('closed', 'Closed'), ('spam', 'Spam')], default='new', max_length=20)),
                ('priority', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('urgent', 'Urgent')], default='medium', max_length=10)),
                ('response_message', models.TextField(blank=True)),
                ('responded_at', models.DateTimeField(blank=True, null=True)),
                ('follow_up_date', models.DateTimeField(blank=True, null=True)),
                ('follow_up_notes', models.TextField(blank=True)),
                ('source', models.CharField(blank=True, help_text='Source of inquiry (website, mobile app, etc.)', max_length=50)),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('user_agent', models.TextField(blank=True)),
                ('assigned_to', models.ForeignKey(blank=True, help_text='Agent/Admin assigned to handle this inquiry', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='assigned_inquiries', to=settings.AUTH_USER_MODEL)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created_by', to=settings.AUTH_USER_MODEL)),
                ('inquirer', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='inquiries_made', to=settings.AUTH_USER_MODEL)),
                ('property_obj', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='inquiries', to='property.property')),
                ('responded_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='inquiries_responded', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated_by', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Property Inquiry',
                'verbose_name_plural': 'Property Inquiries',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='PropertyReport',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('report_type', models.CharField(choices=[('fake_listing', 'Fake Listing'), ('wrong_info', 'Wrong Information'), ('spam', 'Spam'), ('inappropriate_content', 'Inappropriate Content'), ('duplicate', 'Duplicate Listing'), ('fraud', 'Fraudulent Activity'), ('other', 'Other')], max_length=30)),
                ('description', models.TextField()),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('reviewing', 'Under Review'), ('resolved', 'Resolved'), ('dismissed', 'Dismissed')], default='pending', max_length=20)),
                ('admin_notes', models.TextField(blank=True)),
                ('reviewed_at', models.DateTimeField(blank=True, null=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created_by', to=settings.AUTH_USER_MODEL)),
                ('property_obj', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reports', to='property.property')),
                ('reporter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='property_reports', to=settings.AUTH_USER_MODEL)),
                ('reviewed_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='reviewed_reports', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated_by', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Property Report',
                'verbose_name_plural': 'Property Reports',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='PropertyReview',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('overall_rating', models.PositiveIntegerField(help_text='Overall rating from 1-5', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('location_rating', models.PositiveIntegerField(blank=True, help_text='Location rating from 1-5', null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('value_for_money_rating', models.PositiveIntegerField(blank=True, help_text='Value for money rating from 1-5', null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('amenities_rating', models.PositiveIntegerField(blank=True, help_text='Amenities rating from 1-5', null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('maintenance_rating', models.PositiveIntegerField(blank=True, help_text='Maintenance rating from 1-5', null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('neighborhood_rating', models.PositiveIntegerField(blank=True, help_text='Neighborhood rating from 1-5', null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('title', models.CharField(max_length=200)),
                ('review_text', models.TextField()),
                ('stayed_duration', models.CharField(blank=True, help_text='How long did you stay/live here?', max_length=50)),
                ('relationship_to_property', models.CharField(choices=[('owner', 'Owner'), ('tenant', 'Tenant/Renter'), ('visitor', 'Visitor'), ('buyer', 'Potential Buyer'), ('neighbor', 'Neighbor')], default='visitor', max_length=20)),
                ('pros', models.TextField(blank=True, help_text='What did you like?')),
                ('cons', models.TextField(blank=True, help_text='What could be improved?')),
                ('would_recommend', models.BooleanField(blank=True, null=True)),
                ('recommended_for', models.JSONField(default=list, help_text='List of user types this is recommended for (families, students, professionals, etc.)')),
                ('is_verified', models.BooleanField(default=False)),
                ('is_approved', models.BooleanField(default=False)),
                ('is_featured', models.BooleanField(default=False)),
                ('helpful_count', models.PositiveIntegerField(default=0)),
                ('not_helpful_count', models.PositiveIntegerField(default=0)),
                ('owner_response', models.TextField(blank=True)),
                ('owner_response_date', models.DateTimeField(blank=True, null=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created_by', to=settings.AUTH_USER_MODEL)),
                ('property_obj', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to='property.property')),
                ('responded_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='review_responses', to=settings.AUTH_USER_MODEL)),
                ('reviewer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='property_reviews', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated_by', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Property Review',
                'verbose_name_plural': 'Property Reviews',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='PropertyViewing',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('scheduled_date', models.DateTimeField()),
                ('actual_date', models.DateTimeField(blank=True, null=True)),
                ('duration_minutes', models.PositiveIntegerField(default=30)),
                ('viewer_name', models.CharField(max_length=100)),
                ('viewer_email', models.EmailField(max_length=254)),
                ('viewer_phone', models.CharField(max_length=17)),
                ('status', models.CharField(choices=[('scheduled', 'Scheduled'), ('confirmed', 'Confirmed'), ('completed', 'Completed'), ('cancelled', 'Cancelled'), ('no_show', 'No Show'), ('rescheduled', 'Rescheduled')], default='scheduled', max_length=15)),
                ('viewer_feedback', models.TextField(blank=True)),
                ('agent_notes', models.TextField(blank=True)),
                ('interested_level', models.PositiveIntegerField(blank=True, choices=[(1, 1), (2, 2), (3, 3), (4, 4), (5, 5)], help_text='Interest level from 1-5', null=True)),
                ('follow_up_required', models.BooleanField(default=False)),
                ('next_action', models.CharField(blank=True, max_length=200)),
                ('conducted_by', models.ForeignKey(blank=True, help_text='Agent who conducted the viewing', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='conducted_viewings', to=settings.AUTH_USER_MODEL)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created_by', to=settings.AUTH_USER_MODEL)),
                ('inquiry', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='viewings', to='property.propertyinquiry')),
                ('property_obj', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='viewings', to='property.property')),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated_by', to=settings.AUTH_USER_MODEL)),
                ('viewer', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='property_viewings', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Property Viewing',
                'verbose_name_plural': 'Property Viewings',
                'ordering': ['-scheduled_date'],
            },
        ),
        migrations.CreateModel(
            name='PropertyWishlist',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True)),
                ('is_public', models.BooleanField(default=False)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created_by', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated_by', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='wishlists', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Property Wishlist',
                'verbose_name_plural': 'Property Wishlists',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='PropertyWishlistItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('notes', models.TextField(blank=True)),
                ('order', models.PositiveIntegerField(default=0)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created_by', to=settings.AUTH_USER_MODEL)),
                ('property', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='wishlist_items', to='property.property')),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated_by', to=settings.AUTH_USER_MODEL)),
                ('wishlist', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='items', to='property.propertywishlist')),
            ],
            options={
                'verbose_name': 'Wishlist Item',
                'verbose_name_plural': 'Wishlist Items',
                'ordering': ['order', 'created_at'],
            },
        ),
        migrations.AddField(
            model_name='propertywishlist',
            name='properties',
            field=models.ManyToManyField(related_name='in_wishlists', through='property.PropertyWishlistItem', to='property.property'),
        ),
        migrations.CreateModel(
            name='ReviewHelpfulness',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_helpful', models.BooleanField()),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created_by', to=settings.AUTH_USER_MODEL)),
                ('review', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='helpfulness_votes', to='property.propertyreview')),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated_by', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='review_votes', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Review Helpfulness',
                'verbose_name_plural': 'Review Helpfulness Votes',
            },
        ),
        migrations.CreateModel(
            name='PropertyFavorite',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('notes', models.TextField(blank=True, help_text='Personal notes about this property')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created_by', to=settings.AUTH_USER_MODEL)),
                ('property', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='favorited_by', to='property.property')),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated_by', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='favorites', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Property Favorite',
                'verbose_name_plural': 'Property Favorites',
                'ordering': ['-created_at'],
                'unique_together': {('user', 'property')},
            },
        ),
        migrations.CreateModel(
            name='PropertyFeatureMapping',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('value', models.CharField(blank=True, help_text="Additional value for the feature (e.g., '2 units' for AC)", max_length=255)),
                ('is_available', models.BooleanField(default=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created_by', to=settings.AUTH_USER_MODEL)),
                ('feature', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='property_mappings', to='property.propertyfeature')),
                ('property', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='property_features', to='property.property')),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated_by', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Property Feature Mapping',
                'verbose_name_plural': 'Property Feature Mappings',
                'unique_together': {('property', 'feature')},
            },
        ),
        migrations.CreateModel(
            name='PropertyImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('image', models.ImageField(upload_to='property_images/%Y/%m/%d/')),
                ('alt_text', models.CharField(blank=True, max_length=255)),
                ('caption', models.CharField(blank=True, max_length=500)),
                ('is_primary', models.BooleanField(default=False)),
                ('order', models.PositiveIntegerField(default=0)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created_by', to=settings.AUTH_USER_MODEL)),
                ('property', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='images', to='property.property')),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated_by', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Property Image',
                'verbose_name_plural': 'Property Images',
                'ordering': ['order', 'created_at'],
                'unique_together': {('property', 'order')},
            },
        ),
        migrations.AddIndex(
            model_name='propertyinquiry',
            index=models.Index(fields=['status', 'created_at'], name='property_pr_status_f2d3e9_idx'),
        ),
        migrations.AddIndex(
            model_name='propertyinquiry',
            index=models.Index(fields=['property_obj', 'status'], name='property_pr_propert_e0ae92_idx'),
        ),
        migrations.AddIndex(
            model_name='propertyinquiry',
            index=models.Index(fields=['assigned_to', 'status'], name='property_pr_assigne_4b8259_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='propertyreport',
            unique_together={('property_obj', 'reporter', 'report_type')},
        ),
        migrations.AddIndex(
            model_name='propertyreview',
            index=models.Index(fields=['property_obj', 'is_approved'], name='property_pr_propert_1a65bb_idx'),
        ),
        migrations.AddIndex(
            model_name='propertyreview',
            index=models.Index(fields=['overall_rating'], name='property_pr_overall_67e331_idx'),
        ),
        migrations.AddIndex(
            model_name='propertyreview',
            index=models.Index(fields=['created_at'], name='property_pr_created_431f51_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='propertyreview',
            unique_together={('property_obj', 'reviewer')},
        ),
        migrations.AddIndex(
            model_name='property',
            index=models.Index(fields=['city', 'property_type'], name='property_pr_city_cab245_idx'),
        ),
        migrations.AddIndex(
            model_name='property',
            index=models.Index(fields=['listing_type', 'status'], name='property_pr_listing_899b88_idx'),
        ),
        migrations.AddIndex(
            model_name='property',
            index=models.Index(fields=['price'], name='property_pr_price_b1d594_idx'),
        ),
        migrations.AddIndex(
            model_name='property',
            index=models.Index(fields=['created_at'], name='property_pr_created_7a89fc_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='propertywishlistitem',
            unique_together={('wishlist', 'property')},
        ),
        migrations.AlterUniqueTogether(
            name='propertywishlist',
            unique_together={('user', 'name')},
        ),
        migrations.AlterUniqueTogether(
            name='reviewhelpfulness',
            unique_together={('review', 'user')},
        ),
    ]
